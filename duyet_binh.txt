//Chương trình vẽ 1 hình lập phương đơn vị theo mô hình lập trình OpenGL hiện đại

#include "Angel.h"  /* Angel.h là file tự phát triển (tác giả Prof. Angel), có chứa cả khai báo includes glew và freeglut*/
// Hop nhat

// remember to prototype
void generateGeometry(void);
void initGPUBuffers(void);
void shaderSetup(void);
void display(void);
void keyboard(unsigned char key, int x, int y);


typedef vec4 point4;
typedef vec4 color4;
using namespace std;

// Số các đỉnh của các tam giác
const int NumPoints = 36;

point4 points[NumPoints]; /* Danh sách các đỉnh của các tam giác cần vẽ*/
color4 colors[NumPoints]; /* Danh sách các màu tương ứng cho các đỉnh trên*/
point4 vertices[8]; /* Danh sách 8 đỉnh của hình lập phương*/
color4 vertex_colors[8]; /*Danh sách các màu tương ứng cho 8 đỉnh hình lập phương*/
vec3 normals[5000];
GLuint program, model_loc, projection_loc, view_loc;

mat4 mv, dccanh, dcxe, dcmaynang, dcphao, dcxetang, dcxetang1, dcxetang2, xoaybangsung, dichsung, xoaynongsung;
mat4  model;

GLfloat ttxs, ttphao, ttxetang, ttxetang1;

GLfloat l = -1.0, r = 1.0;
GLfloat bottom = -1.0, top = 1.0;
//GLfloat zNear = 1, zFar = 10;
GLfloat zNear = 1, zFar = 40.0;
GLfloat dcc[] = { 0,0 };
GLfloat dcc1[] = { 0,0 };
GLfloat   theta[] = { 0,0,0 };


// Mã màu
vec4 black = color4(0.0, 0.0, 0.0, 1.0); // black
vec4 red = color4(1.0, 0.0, 0.0, 1.0); // red
vec4 yellow = color4(1.0, 1.0, 0.0, 1.0); // yellow
vec4 green = color4(0.0, 1.0, 0.0, 1.0); // green
vec4 blue = color4(0.0, 0.0, 1.0, 1.0); // blue
vec4 magenta = color4(1.0, 0.0, 1.0, 1.0); // magenta
vec4 white = color4(1.0, 1.0, 1.0, 1.0); // white
vec4 cyan = color4(0.0, 1.0, 1.0, 1.0); // cyan
vec4 orange = color4(1, 0.6, 0); // orange




/* Khởi tạo các tham số chiếu sáng - tô bóng*/
point4 light_position(0.0, 0.0, 1.0, 0.0);
color4 light_ambient(0.2, 0.2, 0.2, 1.0);
color4 light_diffuse(1.0, 1.0, 1.0, 1.0);
color4 light_specular(1.0, 1.0, 1.0, 1.0);

color4 material_ambient(1.0, 1.0, 1.0, 1.0);
color4 material_diffuse(1.0, 0.8, 0.0, 1.0);
color4 material_specular(1.0, 0.8, 0.0, 1.0);
float material_shininess = 100.0;

color4 ambient_product = light_ambient * material_ambient;
color4 diffuse_product = light_diffuse * material_diffuse;
color4 specular_product = light_specular * material_specular;



void initCube()
{
	// Gán giá trị tọa độ vị trí cho các đỉnh của hình lập phương
	vertices[0] = point4(-0.5, -0.5, 0.5, 1.0);
	vertices[1] = point4(-0.5, 0.5, 0.5, 1.0);
	vertices[2] = point4(0.5, 0.5, 0.5, 1.0);
	vertices[3] = point4(0.5, -0.5, 0.5, 1.0);
	vertices[4] = point4(-0.5, -0.5, -0.5, 1.0);
	vertices[5] = point4(-0.5, 0.5, -0.5, 1.0);
	vertices[6] = point4(0.5, 0.5, -0.5, 1.0);
	vertices[7] = point4(0.5, -0.5, -0.5, 1.0);

	// Gán giá trị màu sắc cho các đỉnh của hình lập phương	
	vertex_colors[0] = color4(0.0, 0.0, 0.0, 1.0); // black
	vertex_colors[1] = color4(1.0, 0.0, 0.0, 1.0); // red
	vertex_colors[2] = color4(1.0, 1.0, 0.0, 1.0); // yellow
	vertex_colors[3] = color4(0.0, 1.0, 0.0, 1.0); // green
	vertex_colors[4] = color4(0.0, 0.0, 1.0, 1.0); // blue
	vertex_colors[5] = color4(1.0, 0.0, 1.0, 1.0); // magenta
	vertex_colors[6] = color4(1.0, 1.0, 1.0, 1.0); // white
	vertex_colors[7] = color4(0.0, 1.0, 1.0, 1.0); // cyan
}
int Index = 0;
void quad(int a, int b, int c, int d)  /*Tạo một mặt hình lập phương = 2 tam giác, gán màu cho mỗi đỉnh tương ứng trong mảng colors*/
{
	vec4 u = vertices[b] - vertices[a];
	vec4 v = vertices[c] - vertices[b];
	vec3 normal = normalize(cross(u, v));
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[a]; Index++;
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[b]; Index++;
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[c]; Index++;
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[a]; Index++;
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[c]; Index++;
	normals[Index] = normal; colors[Index] = vertex_colors[a]; points[Index] = vertices[d]; Index++;
}
void makeColorCube(void)  /* Sinh ra 12 tam giác: 36 đỉnh, 36 màu*/
{
	quad(1, 0, 3, 2);
	quad(2, 3, 7, 6);
	quad(3, 0, 4, 7);
	quad(6, 5, 1, 2);
	quad(4, 5, 6, 7);
	quad(5, 4, 0, 1);
}
void generateGeometry(void)
{
	initCube();
	makeColorCube();
}


void initGPUBuffers(void)
{
	// Tạo một VAO - vertex array object
	GLuint vao;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	// Tạo và khởi tạo một buffer object
	GLuint buffer;
	glGenBuffers(1, &buffer);
	glBindBuffer(GL_ARRAY_BUFFER, buffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(points) + sizeof(colors) + sizeof(normals), NULL, GL_STATIC_DRAW);

	glBufferSubData(GL_ARRAY_BUFFER, 0, sizeof(points), points);
	glBufferSubData(GL_ARRAY_BUFFER, sizeof(points), sizeof(colors), colors);
	glBufferSubData(GL_ARRAY_BUFFER, sizeof(points) + sizeof(colors), sizeof(normals), normals);
}

void shaderSetup(void)
{
	// Nạp các shader và sử dụng chương trình shader
	program = InitShader("vshader1.glsl", "fshader1.glsl");   // hàm InitShader khai báo trong Angel.h
	glUseProgram(program);

	// Khởi tạo thuộc tính vị trí đỉnh từ vertex shader
	GLuint loc_vPosition = glGetAttribLocation(program, "vPosition");
	glEnableVertexAttribArray(loc_vPosition);
	glVertexAttribPointer(loc_vPosition, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(0));

	GLuint loc_vColor = glGetAttribLocation(program, "vColor");
	glEnableVertexAttribArray(loc_vColor);
	glVertexAttribPointer(loc_vColor, 4, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(sizeof(points)));

	GLuint loc_vNormal = glGetAttribLocation(program, "vNormal");
	glEnableVertexAttribArray(loc_vNormal);
	glVertexAttribPointer(loc_vNormal, 3, GL_FLOAT, GL_FALSE, 0, BUFFER_OFFSET(sizeof(points) + sizeof(colors)));

	glUniform4fv(glGetUniformLocation(program, "AmbientProduct"), 1, ambient_product);
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniform4fv(glGetUniformLocation(program, "SpecularProduct"), 1, specular_product);
	glUniform4fv(glGetUniformLocation(program, "LightPosition"), 1, light_position);
	glUniform1f(glGetUniformLocation(program, "Shininess"), material_shininess);


	model_loc = glGetUniformLocation(program, "Model");
	projection_loc = glGetUniformLocation(program, "Projection");
	view_loc = glGetUniformLocation(program, "View");

	glEnable(GL_DEPTH_TEST);
	glClearColor(220/255, 0.8, 0.8, 1.0);        /* Thiết lập màu trắng là màu xóa màn hình*/
}

// Hàm để tô màu đối tượng
void to_mau(color4 color) {
	material_diffuse = color;  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
}
mat4 model_view, base_model;

void ve() {
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);    /*Vẽ các tam giác*/
}

// Vẽ không gian 
// mặt dưới 
void matduoi() {
	material_diffuse = vec4(0.2, 0.2, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	mv = Translate(0.5, -2.05, 0.0) * Scale(15, 0.1, 20.0); //rotate X Y Z
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);    /*Vẽ các tam giác*/
}

// Vẽ map
void map() {
	matduoi();
}
//vẽ sungs
void nongsung(GLfloat a, GLfloat b, GLfloat c, GLfloat d) {
	mv = Translate(a, b, c) * RotateY(d) * Scale(0.05, 1, 0.05);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * xoaynongsung * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void bangsung(GLfloat a, GLfloat b, GLfloat c) {

	mv = Translate(a, b, c) * Scale(0.1, 0.3, 0.1);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * xoaybangsung * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);


}
void thansung(GLfloat a, GLfloat b, GLfloat c) {

	mv = Translate(a, b, c) * Scale(0.1, 0.14, 0.8);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichsung * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);


}
void khaydan(GLfloat a, GLfloat b, GLfloat c) {

	mv = Translate(a, b, c) * Scale(0.1, 0.3, 0.1);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichsung * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);


}
void vesung() {

	xoaynongsung = Translate(-2.2, -0.7, -0.4) * RotateX(90) * Translate(2.2, 0.7, 0.4);
	for (int i = 0; i < 20; i++) {
		nongsung(-2.2, -0.7, -0.4, (20 * i));

	}
	xoaybangsung = Translate(-2.2, -0.8, -0.9) * RotateX(60) * Translate(2.2, 0.8, 0.9);
	bangsung(-2.2, -0.8, -0.9);
	dichsung = Translate(-4.2, -0.7, -3.0);
	thansung(2, 0, 2.5);
	khaydan(2, -0.1, 2.5);




}

//vẽ robot
mat4 robot;
mat4 dichRobot;
// Ngực
void Nguc()
{
	mat4 ctm = Scale(1.8, 1.0, 1.0);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// bụng
void Bung(GLfloat x, GLfloat y, GLfloat z)
{
	mat4 ctm = Translate(x, y, z) * Scale(1.5, 1.0, 0.8);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// Cổ
void Co(GLfloat x, GLfloat y, GLfloat z)
{
	mat4 ctm = Translate(x, y, z) * Scale(0.3, 0.3, 0.3);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// đầu
void Dau(GLfloat x, GLfloat y, GLfloat z)
{
	mat4 ctm = Translate(x, y, z) * Scale(0.8, 0.8, 0.8);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// cánh tay
mat4 modelDiChuyenTay;
void CanhTay(GLfloat x, GLfloat y, GLfloat z,
	GLfloat a, GLfloat b, GLfloat c,
	GLfloat d, GLfloat e, GLfloat f,
	GLfloat m, GLfloat n, GLfloat o)
{
	mat4 ctm = RotateX(0);

	ctm = ctm * Translate(x, y, z) * Scale(0.8, 0.8, 0.8);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenTay * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * Translate(a, b, c) * Scale(0.625, 1.0625, 0.625);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenTay * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * Translate(d, e, f) * Scale(1, 1, 1);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenTay * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * Translate(m, n, o) * Scale(1.4, 0.7, 1.4);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenTay * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// chân
mat4 modelDiChuyenChan;
void Chan(GLfloat x, GLfloat y, GLfloat z,
	GLfloat a, GLfloat b, GLfloat c,
	GLfloat d, GLfloat e, GLfloat f,
	GLfloat m, GLfloat n, GLfloat o)
{
	mat4 ctm = RotateX(0);

	ctm = Translate(x, y, z) * Scale(0.8, 0.8, 0.8);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenChan * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * Translate(a, b, c) * Scale(0.875, 1.5, 0.875);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenChan * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * RotateX(0);

	ctm = ctm * Translate(d, e, f) * Scale(1, 1.2, 1);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenChan * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);

	ctm = ctm * Translate(m, n, o) * Scale(8 / 7, 0.5, 1.6);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dichRobot * modelDiChuyenChan * robot * ctm);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

// vẽ đầu
void FullDau()
{
	Co(0, 0.65, 0.1);
	Dau(0, 1.15, 0.3);
}

float diChuyenChan;
float diChuyentay;
float diChuyentayngc;
int daoChan;
int daochan1;
int daochanngc;

// vẽ tay
void FullTay()
{
	modelDiChuyenTay = Translate(0, 0.55, 0) * RotateX(diChuyenChan) * Translate(0, -0.55, 0);
	CanhTay(1.3, 0, 0, 0, -0.825, 0, 0, -0.85, 0, 0, -0.775, 0);
	modelDiChuyenTay = Translate(0, 0.55, 0) * RotateX(-diChuyenChan) * Translate(0, -0.55, 0);
	CanhTay(-1.3, 0, 0, 0, -0.825, 0, 0, -0.85, 0, 0, -0.775, 0);
}

// vẽ chân
void FullChan()
{
	modelDiChuyenChan = Translate(0, 0.35, 0) * RotateX(diChuyenChan) * Translate(0, -0.35, 0);
	Chan(-0.415, -1.9, 0, 0, -1.05, 0, 0, -1.1, 0.4, 0, -0.7, 0.1);
	modelDiChuyenChan = Translate(0, 0.35, 0) * RotateX(-diChuyenChan) * Translate(0, -0.35, 0);
	Chan(0.415, -1.9, 0, 0, -1.05, 0, 0, -1.1, 0.4, 0, -0.7, 0.1);
}

// Khởi tạo các biến robot auto
float robotTheta = 0;
float percentRobotTheta = 0.1;
float powerRobot = 0.005;
float turnOfRobot = 1;
int daoChieuDiChuyen = 0;
int daoChieuDiChuyen1 = 0;
float diChuyenRobot;

void Robot()
{
	// Chỉnh màu cho robot
	to_mau(white);

	// robot 1
	dichRobot = Translate(0, -0.5, 2.5) *
		Translate(diChuyenRobot, 0, 0) *
		RotateY(daoChieuDiChuyen) * RotateY(90) *
		Scale(0.35, 0.35, 0.35);
	robot = Scale(0.8, 0.8, 0.8);
	Nguc();
	Bung(0, -1, 0);
	FullDau();
	FullTay();
	FullChan();
	//súng của robot1


	// Chỉnh màu cho robot2
	to_mau(white);

	// robot 1
	dichRobot = Translate(1, -0.5, 2.5) *
		Translate(diChuyenRobot, 0, 0) *
		RotateY(daoChieuDiChuyen) * RotateY(90) *
		Scale(0.35, 0.35, 0.35);
	robot = Scale(0.8, 0.8, 0.8);
	Nguc();
	Bung(0, -1, 0);
	FullDau();
	FullTay();
	FullChan();
	// Chỉnh màu cho robot3
	to_mau(white);

	// robot 1
	dichRobot = Translate(2, -0.5, 2.5) *
		Translate(diChuyenRobot, 0, 0) *
		RotateY(daoChieuDiChuyen) * RotateY(90) *
		Scale(0.35, 0.35, 0.35);
	robot = Scale(0.8, 0.8, 0.8);
	Nguc();
	Bung(0, -1, 0);
	FullDau();
	FullTay();
	FullChan();

	// Chỉnh màu cho robot4
	to_mau(white);

	// robot 1
	dichRobot = Translate(3, -0.5, 2.5) *
		Translate(diChuyenRobot, 0, 0) *
		RotateY(daoChieuDiChuyen) * RotateY(90) *
		Scale(0.35, 0.35, 0.35);
	robot = Scale(0.8, 0.8, 0.8);
	Nguc();
	Bung(0, -1, 0);
	FullDau();
	FullTay();
	FullChan();
	//robot đứng yên cạnh xe đạn
	// Chỉnh màu cho robot5
	to_mau(white);

	// robot 1
	dichRobot = Translate(-2, -0.5, -0.5) *
		RotateY(90) *
		Scale(0.35, 0.35, 0.35);
	robot = Scale(0.8, 0.8, 0.8);
	Nguc();
	Bung(0, -1, 0);
	FullDau();
	FullTay();
	FullChan();

}

float check1 = 1;
// Ham xu ly Robot di bộ
void robotDiBo(void)
{
	if (turnOfRobot == 1) {
		// Biến di chuyển nhanh chậm
		if (percentRobotTheta < 2.3)
			percentRobotTheta += 0.5;
		// Biến đổi chiều chuyển động 
		if (daoChieuDiChuyen == 0) {
			diChuyenRobot += powerRobot * percentRobotTheta;
			if (diChuyenRobot > 1.8)  daoChieuDiChuyen = 180;
		}
		if (daoChieuDiChuyen == 180) {
			diChuyenRobot -= powerRobot * percentRobotTheta;
			if (diChuyenRobot < -1.8)  daoChieuDiChuyen = 0;
		}
		// Biến đổi di chuyển tay, chân( đánh tay, chân )
		if (daoChan == 0) {
			diChuyenChan += 0.5;
			if (diChuyenChan > 8)  daoChan = 1;
		}
		if (daoChan == 1) {
			diChuyenChan -= 0.5;
			if (diChuyenChan < -8)  daoChan = 0;
		}
	}
	glutPostRedisplay();
}

void xuLyAuto(void) {
	robotDiBo();
	Robot();

}



// ô tô
void gam_xe2() {
	material_diffuse = vec4(1.0, 0.75, 1.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	mv = Translate(3.8, -1.4, -1.9) * Scale(1, 0.5, 3.0);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxe * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);    /*Vẽ các tam giác*/
}
void banhxe1(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateX(d) * Scale(0.2, 0.6, 0.6);
	material_diffuse = vec4(0, 0, 0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxe * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void oto2() {
	gam_xe2();
	for (int j = 0; j < 20; j++) {
		banhxe1(2.5, -1.6, -1.2, (6 * j));
		banhxe1(2.5, -1.6, -2.8, (6 * j));
		banhxe1(0.5, -1.6, -1.2, (6 * j));
		banhxe1(0.5, -1.6, -2.8, (6 * j));
	}
}

//xe pháo
void thanxe()
{
	mv = Translate(0.55, -1.2, -1.5) * Scale(1, 1.3, 1);;
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanduoi()
{
	mv = Translate(1.1, -1.5, -1.5) * Scale(4.1, 0.7, 1);;
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanduoi1()
{
	mv = Translate(0.1, -1.18, -1.5) * Scale(1, 0.9, 0.99) * RotateZ(-45.0);
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void banhxecon(GLfloat a, GLfloat b, GLfloat c, GLfloat y)
{
	mv = Translate(a, b, c) * RotateZ(y) * Scale(0.5, 0.5, 0.2);
	material_diffuse = vec4(0, 0, 0, 0);  // mau vat

	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void cuaso1()
{
	mv = Translate(0.7, -0.9, -0.99) * Scale(0.4, 0.4, 0.01);
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void cuaso2()
{
	mv = Translate(0.7, -0.9, -2.01) * Scale(0.4, 0.4, 0.01);
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void phao(GLfloat w, GLfloat h, GLfloat l, GLfloat k)
{
	mv = Translate(w, h, l) * RotateX(k) * Scale(1.8, 0.1, 0.1);
	material_diffuse = vec4(1, 1, 0, 1);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcmaynang * dcphao * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void xephao()
{
	thanxe();
	thanduoi();
	thanduoi1();
	cuaso1();
	cuaso2();
	for (int i = 0; i < 20; i++)
	{
		banhxecon(0.1, -1.65, -0.95, (6 * i));
		banhxecon(0.1, -1.65, -2.05, (6 * i));
		banhxecon(2, -1.65, -0.95, (6 * i));
		banhxecon(2, -1.65, -2.05, (6 * i));
		for (int j = 0; j < 5; j++) {
			phao(2.1, -1.1, -1.1 - (0.2 * j), (6 * i));
			phao(2.1, -0.8, -1.1 - (0.2 * j), (6 * i));
			dcphao = Translate(3, -1.1, -1.1 - (0.2 * j)) * RotateZ(ttphao) * Translate(-3, 1.1, 1.1 + (0.2 * j));
		}
	}
	dcmaynang = RotateY(180) * Translate(1.0 - ttxs, 1, 4.5) * Scale(1.5);

}


//xe tăng
void thanxetang()
{
	mv = Translate(3.2, -1.2, 0.5) * Scale(3.5, 0.8, 1.5);;
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void maixetang(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateY(d) * Scale(0.8, 0.8, 0.8) * RotateX(45);
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void phaoxetang(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateX(d) * Scale(3, 0.15, 0.15);
	material_diffuse = vec4(0.2, 0.5, 0.2, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang * dcxetang1 * dcxetang2 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

void thanhbanhxetang1()
{
	mv = Translate(3.2, -1.2, 1.4) * Scale(3, 0.1, 0.5);;
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanhbanhxetang2()
{
	mv = Translate(3.2, -2, 1.4) * Scale(3, 0.1, 0.5);;
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanhbanhxetang3()
{
	mv = Translate(3.2, -1.2, -0.45) * Scale(3, 0.1, 0.5);;
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanhbanhxetang4()
{
	mv = Translate(3.2, -2, -0.45) * Scale(3, 0.1, 0.5);;
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void thanhtronbanhxetang(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateZ(d) * Scale(0.5, 0.75, 0.5);
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dcxetang1 * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void xetang() {
	thanxetang();
	thanhbanhxetang1();
	thanhbanhxetang2();
	thanhbanhxetang3();
	thanhbanhxetang4();
	for (int i = 0; i < 20; i++) {
		maixetang(3.8, -0.8, 0.5, (6 * i));
		phaoxetang(1.7, -0.7, 0.5, (6 * i));

		thanhtronbanhxetang(1.7, -1.6, 1.4, (6 * i));
		thanhtronbanhxetang(4.7, -1.6, 1.4, (6 * i));
		thanhtronbanhxetang(3.2, -1.6, 1.4, (6 * i));

		thanhtronbanhxetang(1.7, -1.6, -0.45, (6 * i));
		thanhtronbanhxetang(4.7, -1.6, -0.45, (6 * i));
		thanhtronbanhxetang(3.2, -1.6, -0.45, (6 * i));
	}
	dcxetang1 = Translate(-ttxetang, 0.1, 0);
	dcxetang2 = Translate(3, -0.5, 0.5) * RotateZ(ttxetang1 - 20) * Translate(-3, 0.5, -0.5);
}

//cây
void thancay(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateY(d) * Scale(0.4, 4, 0.4);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void canhcay(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateY(d) * Scale(0.2, 1, 0.2);
	material_diffuse = vec4(0.5, 0.2, 0.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dccanh * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void tancay(GLfloat a, GLfloat b, GLfloat c, GLfloat d, GLfloat e)
{
	mv = Translate(a, b, c) * RotateY(d) * RotateX(e) * Scale(1.5, 2.2, 1.5);
	material_diffuse = vec4(0.1, 0.9, 0.1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}

void tancay1(GLfloat a, GLfloat b, GLfloat c, GLfloat d, GLfloat e)
{
	mv = Translate(a, b, c) * RotateY(d) * RotateX(e) * Scale(0.8, 0.8, 0.8);
	material_diffuse = vec4(0.1, 0.9, 0.1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * dccanh * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void cay() {
	//cay1
	for (int i = 0; i < 10; i++) {
		thancay(4.5, 0, -7, (12 * i));
		canhcay(5, 0, -7, (12 * i));
		for (int j = 0; j < 10; j++) {
			tancay(4.5, 2.8, -7, (12 * i), (12 * j));
			tancay1(5, 0.8, -7, (12 * i), (12 * j));
		}

	}
	dccanh = Translate(4, 0, -2.5) * RotateZ(45) * Translate(-5, 0, 2.5);



	//cay2
	for (int i = 0; i < 10; i++) {
		thancay(2, 0, -7, (12 * i));
		for (int j = 0; j < 10; j++) {
			tancay(2, 2.8, -7, (12 * i), (12 * j));

		}

	}
	//cay3
	for (int i = 0; i < 10; i++) {
		thancay(0, 0, -7, (12 * i));
		for (int j = 0; j < 10; j++) {
			tancay(0, 2.8, -7, (12 * i), (12 * j));

		}

	}
	//cay4
	for (int i = 0; i < 10; i++) {
		thancay(-2, 0, -7, (12 * i));
		for (int j = 0; j < 10; j++) {
			tancay(-2, 2.8, -7, (12 * i), (12 * j));

		}

	}

}

//bia ngắm
void thanhbiadoc()
{
	mv = Translate(-3, -1.3, 2.5) * Scale(0.15, 1.4, 0.15);;
	material_diffuse = vec4(1, 1, 1, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void bia(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateX(d) * Scale(0.1, 0.5, 0.5);
	material_diffuse = vec4(0.0, 0.6, 1.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void bia1(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
	mv = Translate(a, b, c) * RotateX(d) * Scale(0.09, 1, 1);
	material_diffuse = vec4(1, 0.6, 1.0, 0);  // mau vat
	diffuse_product = light_diffuse * material_diffuse;
	glUniform4fv(glGetUniformLocation(program, "DiffuseProduct"), 1, diffuse_product);
	glUniformMatrix4fv(model_loc, 1, GL_TRUE, model * mv);
	glDrawArrays(GL_TRIANGLES, 0, NumPoints);
}
void biangam() {
	thanhbiadoc();
	for (int i = 0; i < 10; i++) {
		bia(-3, 0, 2.5, (12 * i));
		bia1(-3, 0, 2.5, (12 * i));
	}
}


GLfloat cam_pos_x = 0;
GLfloat cam_pos_y = 0;
GLfloat cam_pos_z = 2;
/// Ve Hien thi
void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	vesung();
	map();
	xuLyAuto();
	xephao();
	xetang();
	cay();
	biangam();

	model = RotateX(theta[1]) * RotateY(theta[2]) * RotateZ(theta[3]);
	// view
	point4 eye(0.0, 0.0, 15, 1.0);
	point4 at(0, -5.0, 0.0, 1.0);
	vec4 up(0.0, 1.0, 0.0, 1.0);
	mat4 mv = LookAt(eye, at, up);
	glUniformMatrix4fv(view_loc, 1, GL_TRUE, mv);
	// projection
	mat4 projection = Frustum(l, r, bottom, top, zNear, zFar);
	glUniformMatrix4fv(projection_loc, 1, GL_TRUE, projection);
	glutSwapBuffers();


}

void spinCube() {

	glutPostRedisplay();
}

void keyboard(unsigned char key, int x, int y)
{

	switch (key) {
	case 'a': zNear *= 1.1f; zFar *= 1.1f; break;
	case 'A': zNear *= 0.9f; zFar *= 0.9f; break;

	case 'x':
		theta[1] += 5;
		if (theta[1] > 360) theta[1] -= 360;
		break;
	case 'X':
		theta[1] -= 5;
		if (theta[1] > 360) theta[1] -= 360;
		break;
	case 'y':
		theta[2] += 5;
		if (theta[2] > 360) theta[2] -= 360;
		break;
	case 'Y':
		theta[2] -= 5;
		if (theta[2] > 360) theta[2] -= 360;
		break;
	case 'z':
		theta[3] += 5;
		if (theta[3] > 360) theta[3] -= 360;
		break;
	case 'Z':
		theta[3] -= 5;
		if (theta[3] > 360) theta[3] -= 360;
		break;
	case 'c': // đóng mở cửa xe
		dcc[0] -= 5;
		if (dcc[0] - 5 <= -90) dcc[0] = -90;
		glutPostRedisplay();
		break;
	case 'C':
		dcc[0] += 5;
		if (dcc[0] + 5 >= 0) dcc[0] = 0;
		glutPostRedisplay();
		break;
	case 'm': // xe đi
		ttxs += 0.1;
		if (ttxs >= 3) { ttxs = 3; }
		glutPostRedisplay();
		break;
	case 'M':// xe về
		ttxs -= 0.1;
		if (ttxs <= 0) { ttxs = 0; }
		glutPostRedisplay();
		break;
	case 'p':
		ttphao -= 5;
		if (ttphao - 5 < -45) { ttphao = -45; }
		glutPostRedisplay();
		break;
	case 'P':
		ttphao += 5;
		if (ttphao + 5 > 0) { ttphao = 0; }
		glutPostRedisplay();
		break;
	case 't': // xe đi
		ttxetang += 0.1;
		if (ttxetang >= 3) { ttxetang = 3; }
		glutPostRedisplay();
		break;
	case 'T':// xe về
		ttxetang -= 0.1;
		if (ttxetang <= 0) { ttxetang = 0; }
		glutPostRedisplay();
		break;
	case 'o':
		ttxetang1 -= 5;
		if (ttxetang1 - 5 < -30) { ttxetang1 = -30; }
		glutPostRedisplay();
		break;
	case 'O':
		ttxetang1 += 5;
		if (ttxetang1 + 5 > 0) { ttxetang1 = 0; }
		glutPostRedisplay();
		break;
	}
}




void SpecialFunc(int key, int x, int y) {
	switch (key)
	{
	case GLUT_KEY_RIGHT:
		cam_pos_x += 0.03f;

		//cam_moved = true;
		break;
	case GLUT_KEY_LEFT:
		cam_pos_x -= 0.03f;

		//cam_moved = true;
		break;
	case GLUT_KEY_UP:
		cam_pos_z -= 0.03f;

		//cam_moved = true;
		break;
	case GLUT_KEY_DOWN:
		cam_pos_z += 0.03f;

		break;
	}

	glutPostRedisplay();
}

int main(int argc, char** argv)
{
	// main function: program starts here

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(940, 940);
	glutInitWindowPosition(100, 150);
	glutCreateWindow("Ve duyet binh");

	glewInit();

	generateGeometry();
	initGPUBuffers();
	shaderSetup();

	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutIdleFunc(spinCube);

	glutSpecialFunc(SpecialFunc);

	glutMainLoop();
	return 0;
}




